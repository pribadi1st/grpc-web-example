/**
 * @fileoverview gRPC-Web generated client stub for pb
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.28.0
// source: service_ivy.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var ivy_message_pb = require('./ivy_message_pb.js')
const proto = {};
proto.pb = require('./service_ivy_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.pb.IvyClient =
  function (hostname, credentials, options) {
    if (!options) options = {};
    options.format = 'text';

    /**
     * @private @const {!grpc.web.GrpcWebClientBase} The client
     */
    this.client_ = new grpc.web.GrpcWebClientBase(options);

    /**
     * @private @const {string} The hostname
     */
    this.hostname_ = hostname.replace(/\/+$/, '');

  };


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.pb.IvyPromiseClient =
  function (hostname, credentials, options) {
    if (!options) options = {};
    options.format = 'text';

    /**
     * @private @const {!grpc.web.GrpcWebClientBase} The client
     */
    this.client_ = new grpc.web.GrpcWebClientBase(options);

    /**
     * @private @const {string} The hostname
     */
    this.hostname_ = hostname.replace(/\/+$/, '');

  };


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.StreamMessageRequest,
 *   !proto.pb.StreamMessageResponse>}
 */
const methodDescriptor_Ivy_StreamMessage = new grpc.web.MethodDescriptor(
  '/pb.Ivy/StreamMessage',
  grpc.web.MethodType.SERVER_STREAMING,
  ivy_message_pb.StreamMessageRequest,
  ivy_message_pb.StreamMessageResponse,
  /**
   * @param {!proto.pb.StreamMessageRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  ivy_message_pb.StreamMessageResponse.deserializeBinary
);


/**
 * @param {!proto.pb.StreamMessageRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.pb.StreamMessageResponse>}
 *     The XHR Node Readable Stream
 */
proto.pb.IvyClient.prototype.streamMessage =
  function (request, metadata) {
    return this.client_.serverStreaming(this.hostname_ +
      '/pb.Ivy/StreamMessage',
      request,
      metadata || {},
      methodDescriptor_Ivy_StreamMessage);
  };


/**
 * @param {!proto.pb.StreamMessageRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.pb.StreamMessageResponse>}
 *     The XHR Node Readable Stream
 */
proto.pb.IvyPromiseClient.prototype.streamMessage =
  function (request, metadata) {
    return this.client_.serverStreaming(this.hostname_ +
      '/pb.Ivy/StreamMessage',
      request,
      metadata || {},
      methodDescriptor_Ivy_StreamMessage);
  };


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.StreamMessageCompanyRequest,
 *   !proto.pb.StreamMessageCompanyResponse>}
 */
const methodDescriptor_Ivy_StreamMessagePerCompany = new grpc.web.MethodDescriptor(
  '/pb.Ivy/StreamMessagePerCompany',
  grpc.web.MethodType.SERVER_STREAMING,
  ivy_message_pb.StreamMessageCompanyRequest,
  ivy_message_pb.StreamMessageCompanyResponse,
  /**
   * @param {!proto.pb.StreamMessageCompanyRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  ivy_message_pb.StreamMessageCompanyResponse.deserializeBinary
);


/**
 * @param {!proto.pb.StreamMessageCompanyRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.pb.StreamMessageCompanyResponse>}
 *     The XHR Node Readable Stream
 */
proto.pb.IvyClient.prototype.streamMessagePerCompany =
  function (request, metadata) {
    return this.client_.serverStreaming(this.hostname_ +
      '/pb.Ivy/StreamMessagePerCompany',
      request,
      metadata || {},
      methodDescriptor_Ivy_StreamMessagePerCompany);
  };


/**
 * @param {!proto.pb.StreamMessageCompanyRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.pb.StreamMessageCompanyResponse>}
 *     The XHR Node Readable Stream
 */
proto.pb.IvyPromiseClient.prototype.streamMessagePerCompany =
  function (request, metadata) {
    return this.client_.serverStreaming(this.hostname_ +
      '/pb.Ivy/StreamMessagePerCompany',
      request,
      metadata || {},
      methodDescriptor_Ivy_StreamMessagePerCompany);
  };


module.exports = proto.pb;
